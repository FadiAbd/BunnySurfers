 @page "/courses"
 @inject ICourseService CourseService
 @inject NavigationManager NavigationManager
 @inject HttpClient Http
 @rendermode @(new InteractiveServerRenderMode(prerender:false))
@*  @rendermode InteractiveServer *@

<h2 style="text-align: center;">Courses</h2>

@* @if (courses == null) *@
@if (courses.Count == 0)
{
    <p><em>Loading courses...</em></p>
}
else
{

    <div class="container mt-5" style="margin: 0 auto; text-align: center;">
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Actions</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in courses)
                    {
                        <tr>
                            <td>@course.Name</td>
                            <td>@course.Description</td>
                            <td class="text-nowrap">@course.StartDate.ToString("yyyy-MM-dd")</td>
                            <td class="text-nowrap">@course.EndDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                
                                <button class="btn btn-primary" @onclick="(() => EditCourse(course.CourseId))">Edit</button>
                                <button class="btn btn-danger" @onclick="(() => DeleteCourse(course.CourseId))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @* <button class="btn btn-primary" @onclick="(() => ShowCourse(courseId))">Create new course</button> *@
        </div>
    </div>

  
     <button class="btn btn-primary" @onclick="CreateNewCourse">Create New Course</button> 
}

@code {
    // private List<Course> courses;
        private List<Course> courses = new List<Course>();

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseService.GetCourses();
        {

            var data = await Http.GetStringAsync("/api/Course");
            var uri = "https://localhost:7274/api/Course";
            Console.WriteLine($"Requesting URI: {uri}"); data = await Http.GetStringAsync(uri);
        }
    }

    private async Task EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"/coursesedit");
    }

    private async Task DeleteCourse(int courseId)
    {
        await CourseService.DeleteCourse(courseId);
        courses = await CourseService.GetCourses();
    }

   // void ShowCourse(int courseId)
   //  {
   //       NavigationManager.NavigateTo($"coursesedit/{courseId}");
        
   //  }

    void CreateNewCourse()
    {
        NavigationManager.NavigateTo($"/coursesedit");
    }
}

   
   


