@page "/activities"
@inject IActivityService ActivityService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode @(new InteractiveServerRenderMode(prerender:false))


<h2 style="text-align:center">Activities</h2>

@if (activities.Count == 0)
{
    <p><em>Loading Activities...</em></p>
}
else
{
    <div class="container mt-5" style="margin: 0 auto; text-align: center;">
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>ActivityType</th>
                       @*  <th>Start Time</th>
                        <th>End Time</th> *@
                        <th>ModuleId</th>
                        <th>Actions</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var activity in activities)
                    {
                        <tr>
                            <td>@activity.Name</td>
                            <td>@activity.Description</td>
                            <th>@activity.ActivityType</th>
                            <td class="text-nowrap">@activity.StartTime.ToString("yyyy-MM-dd")</td>
                            <td class="text-nowrap">@activity.EndTime.ToString("yyyy-MM-dd")</td>
                            <td>@activity.ModuleId</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditActivity(activity.ActivityId))">Edit</button>
                                <button class="btn btn-danger" @onclick="(() => DeleteActivity(activity.ActivityId))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {


    private List<Activity> activities = new List<Activity>();

    protected override async Task OnInitializedAsync()
    {
       
        await LoadActivities();
    }

    private async Task LoadActivities()
    {
        activities = await ActivityService.GetActivities();
    }

    private void EditActivity(int activityId)
    {
        NavigationManager.NavigateTo($"/activitiesedit/{activityId}");

    }

    private async Task DeleteActivity(int activityId)
    {
        await ActivityService.DeleteActivity(activityId);

        await LoadActivities();
        NavigationManager.NavigateTo($"/TeachersPage");
    }
}

