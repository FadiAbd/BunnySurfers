@page "/Createactivity"
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IActivityService ActivityService
@inject NavigationManager NavigationManager



<h2>Create Activity</h2>

<EditForm Model="@activity" OnValidSubmit="HandleValidSubmit" FormName="EditActivityForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="activity.Name" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputText id="description" class="form-control" @bind-Value="activity.Description" />
    </div>
    @* <div class="mb-3">
    <label for="activityType" class="form-label">Activity Type</label>
    <input id="activityType" class="form-control" @bind-Value="activity.ActivityType" />
    </div> *@
    <div class="mb-3">
        <label for="startTime" class="form-label">Start Time</label>
        <InputDate id="startTime" class="form-control" @bind-Value="activity.StartTime" />
    </div>
    <div class="mb-3">
        <label for="endTime" class="form-label">End Time</label>
        <InputDate id="endTime" class="form-control" @bind-Value="activity.EndTime" />
    </div>

    <GenericDropdown ForName="moduleId"
                     LabelText="Module"
                     DefaultOptionText="Choose module"
                     ItemDict="@ModuleDict"
                     OnValueChanged="@OnModuleChanged" />

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter] 
    public int activityId { get; set; }

    [Inject]
    public IModuleService ModuleService { get; set; } = null!;

    private IEnumerable<Module> Modules { get; set; } = [];

    private Dictionary<int, string> ModuleDict { get; set; } = [];

   

    private Activity activity = new Activity
    {
            Name = "", // Initialize with an appropriate default value
            Description = "",
            // StartTime = DateOnly.FromDateTime(DateTime.Today),
            // EndTime = DateOnly.FromDateTime(DateTime.Today.AddDays(30)),
            ModuleId = 0
    };

    protected override async Task OnInitializedAsync()
    {
        Modules = await ModuleService.GetModules();
        foreach (var module in Modules)
        {
            ModuleDict[module.ModuleId] = module.Name;
        }
    }
    
    private async Task HandleValidSubmit()
    {

        if (activity.ActivityId == 0)
        {
            await ActivityService.CreateActivity(activity);
        }

        NavigationManager.NavigateTo("/TeachersPage");
    }

    public void OnModuleChanged(int selectedModuleId)
    {
        activity.ModuleId = selectedModuleId;
    }

       

}

