@page "/module"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode @(new InteractiveServerRenderMode(prerender:false))


<h2 style="text-align:center">Modules</h2>

@if (modules.Count == 0)
{
    <p><em>Loading Modules...</em></p>
}
else
{
    <div class="container mt-5" style="margin: 0 auto; text-align: center;">
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>CourseId</th>
                        <th>Actions</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var module in modules)
                    {
                        <tr>
                            <td>@module.Name</td>
                            <td>@module.Description</td>
                            <td class="text-nowrap">@module.StartDate.ToString("yyyy-MM-dd")</td>
                            <td class="text-nowrap">@module.EndDate.ToString("yyyy-MM-dd")</td>
                            <td>@module.CourseId</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditModule(module.ModuleId))">Edit</button>
                                <button class="btn btn-danger" @onclick="(() => DeleteModule(module.ModuleId))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Inject]
    public IModuleService ModuleService { get; set; } = null!;

    private List<Module> modules = new List<Module>();

   

    protected override async Task OnInitializedAsync()
    {
        modules = await ModuleService.GetModules();
    }

    private void EditModule(int moduleId)
    {
        NavigationManager.NavigateTo($"/modulesedit/{moduleId}");
    }

    private async Task DeleteModule(int moduleId)
    {
        
        await ModuleService.DeleteModule(moduleId);
       
        modules = await ModuleService.GetModules();
    }
}
